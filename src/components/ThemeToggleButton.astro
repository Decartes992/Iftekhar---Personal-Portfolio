---
// Enhanced ThemeToggleButton with smooth transitions and animations
---

<button id="theme-toggle" class="theme-toggle-button group" aria-label="Toggle dark mode">
  <!-- Sun icon (visible in dark mode) -->
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transition-transform duration-300 rotate-0 dark:rotate-90 dark:scale-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
  
  <!-- Moon icon (visible in light mode) -->
  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 transition-transform duration-300 rotate-90 scale-0 dark:rotate-0 dark:scale-100" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
  </svg>
</button>

<style>
  .theme-toggle-button {
    position: relative;
    border-radius: 9999px;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  .theme-toggle-button::after {
    content: '';
    position: absolute;
    z-index: -1;
    width: 100%;
    height: 100%;
    background-color: var(--clr-bg-alt-current);
    border-radius: 9999px;
    top: 0;
    left: 0;
    transform: scale(0);
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .theme-toggle-button:hover::after {
    transform: scale(1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle');
    
    // Check for saved theme preference or use the system preference
    const getInitialTheme = () => {
      const savedTheme = localStorage.getItem('theme');
      
      if (savedTheme) {
        return savedTheme;
      }
      
      // Check for system preference
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    };
    
    // Apply theme
    const applyTheme = (theme) => {
      if (theme === 'dark') {
        document.documentElement.setAttribute('data-theme', 'dark');
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.removeAttribute('data-theme');
        document.documentElement.classList.remove('dark');
      }
      
      localStorage.setItem('theme', theme);
    };
    
    // Initial theme setup
    applyTheme(getInitialTheme());
    
    // Toggle theme
    themeToggle.addEventListener('click', () => {
      const currentTheme = localStorage.getItem('theme') || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      // Add pulse animation on click
      themeToggle.classList.add('animate-pulse');
      setTimeout(() => themeToggle.classList.remove('animate-pulse'), 300);
      
      applyTheme(newTheme);
    });
    
    // Listen for system preference changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      const newTheme = e.matches ? 'dark' : 'light';
      applyTheme(newTheme);
    });
  });
</script>