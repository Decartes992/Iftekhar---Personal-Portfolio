---
// src/components/Button.astro
/**
 * Reusable button component with multiple variants
 *
 * @module Button
 * @description A flexible button component that can render as either a button or anchor tag
 *
 * @prop {string} [href] - URL for anchor tag behavior (optional)
 * @prop {'primary' | 'secondary' | 'outline' | 'ghost'} [variant='primary'] - Button style variant
 * @prop {'sm' | 'md' | 'lg'} [size='md'] - Button size
 * @prop {string} [extraClass] - Additional CSS classes to apply
 * @prop {any} children - Button content
 * @prop {boolean} [disabled=false] - Disable button or link
 * @prop {'button' | 'submit' | 'reset'} [type='button'] - Button type attribute
 *
 * @example
 * <Button href="/contact" variant="primary">Contact Me</Button>
 */
export interface Props {
  href?: string;
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost'; // Added more variants
  size?: 'sm' | 'md' | 'lg'; // Added size prop
  extraClass?: string;
  children: any;
  disabled?: boolean; // Added disabled prop
  type?: 'button' | 'submit' | 'reset'; // Added type prop for button element
}

const { 
  href,
  variant = 'primary',
  size = 'md', // Default size
  extraClass = '',
  children,
  disabled = false,
  type = 'button' // Default type for button element
} = Astro.props;

const baseClasses = [
  "inline-flex items-center justify-center font-medium rounded-md transition-all duration-200 ease-in-out focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-bg-base-current dark:focus-visible:ring-offset-bg-base-dark",
  "disabled:opacity-50 disabled:cursor-not-allowed",
];

const variantClasses = {
  primary: "bg-primary-500 hover:bg-primary-600 text-white focus-visible:ring-primary-500",
  secondary: "bg-secondary-500 hover:bg-secondary-600 text-white focus-visible:ring-secondary-500",
  outline: "border border-primary-500 text-primary-500 hover:bg-primary-500/10 focus-visible:ring-primary-500",
  ghost: "text-primary-500 hover:bg-primary-500/10 focus-visible:ring-primary-500",
};

const sizeClasses = {
  sm: "px-3 py-1.5 text-sm",
  md: "px-4 py-2 text-base",
  lg: "px-6 py-3 text-lg",
};

const className = [
  ...baseClasses,
  variantClasses[variant],
  sizeClasses[size],
  extraClass,
].join(" ");
---

{href && !disabled ? (
  <a href={href} class={className} aria-disabled={disabled ? "true" : undefined}>
    <slot />
  </a>
) : (
  <button type={type} class={className} disabled={disabled}>
    <slot />
  </button>
)}

<style>
  /* Minimal specific styles here, relying on Tailwind utility classes */
  /* Ensure touch targets are still good, though size props help */
  .btn-base-styles {
    min-width: 44px;
    min-height: 44px;
  }
</style>