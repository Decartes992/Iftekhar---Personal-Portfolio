---
/**
 * Site header component with responsive navigation, theme toggle, and mobile menu
 *
 * @module Header
 * @description This component renders the main site header with navigation links,
 * theme toggle button, and a responsive mobile menu. It includes scroll progress tracking
 * and sticky behavior.
 *
 * @prop {Array} navItems - Array of navigation items with href and text properties
 * @prop {string} currentPage - Current page path for active link highlighting
 *
 * @example
 * <Header />
 *
 * @todo Implement sticky behavior with scroll threshold
 * @todo Add animated logo on scroll
 * @todo Implement smart navigation that highlights current section
 * @todo Complete mobile hamburger menu functionality
 */
import ThemeToggle from '../components/ThemeToggle.jsx';
import Button from './Button.astro';

const navItems = [
  { href: '/', text: 'Home' },
  { href: '/about', text: 'About' },
  { href: '/projects', text: 'Projects' },
  { href: '/resume', text: 'Resume' },
  { href: '/contact', text: 'Contact' },
];

const currentPage = Astro.url.pathname;
const siteTitle = "Iftekhar Rafi";
const siteSubtitle = "Software Engineer";

export interface Props {
  menuId?: string;
}
const { menuId } = Astro.props;
---
<header id="main-header" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out group is-sticky bg-bg-base-current/80 dark:bg-bg-base-dark/80 backdrop-blur-md shadow-md print:hidden">
  <div id="scroll-progress-bar" class="h-1 bg-gradient-to-r from-primary-500 to-accent-500" style="width: 0%;"></div>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16 md:h-20">
      <!-- Animated Logo/Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="flex flex-col group/logo" aria-label="Homepage">
          <span class="text-xl md:text-2xl font-bold font-display text-text-base-current dark:text-text-dark-current group-hover/logo:text-primary-500 transition-colors duration-300">{siteTitle}</span>
          <span class="text-xs md:text-sm text-text-muted-current dark:text-text-muted-dark-current group-hover/logo:text-primary-400 transition-colors duration-300">{siteSubtitle}</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden md:flex space-x-5 lg:space-x-7 items-center">
        {navItems.map(item => {
          const isActive = currentPage === item.href || (item.href !== "/" && currentPage.startsWith(item.href) && item.href.length > 1);
          return (
            <a 
              href={item.href} 
              class:list={[
                "relative text-base font-medium py-2 transition-colors duration-300 ease-out group/nav-item",
                isActive 
                  ? "text-primary-500 dark:text-primary-400 font-semibold"
                  : "text-text-base-current dark:text-text-dark-current hover:text-primary-500 dark:hover:text-primary-400"
              ]}
              aria-current={isActive ? "page" : false}
            >
              {item.text}
              <span class:list={[
                "absolute bottom-0 left-0 w-full h-0.5 transform origin-bottom transition-transform duration-300 ease-out",
                isActive ? "scale-x-100 bg-primary-500 dark:bg-primary-400" : "scale-x-0 group-hover/nav-item:scale-x-100 bg-primary-500 dark:bg-primary-400"
              ]}></span>
            </a>
          );
        })}
      </nav>

      <!-- Right side items: Theme Toggle & CTA -->
      <div class="flex items-center space-x-3 md:space-x-4">
        <ThemeToggle client:load />
        <div class="hidden sm:block">
          <Button href="/contact#contact-form" variant="primary" size="sm" extraClass="group/cta">
            Hire Me
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 ml-1.5 transform transition-transform duration-200 group-hover/cta:translate-x-0.5">
              <path fill-rule="evenodd" d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z" clip-rule="evenodd" />
            </svg>
          </Button>
        </div>
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden flex items-center">
        <button 
          id="mobile-menu-button" 
          aria-label="Open menu" 
          aria-expanded="false" 
          aria-controls="mobile-menu-overlay"
          class="text-text-base-current dark:text-text-dark-current focus:outline-none p-2 rounded-md hover:bg-bg-alt-current dark:hover:bg-bg-alt-dark-current focus-visible:ring-2 focus-visible:ring-primary-500 transition-colors"
        >
          <svg class="w-6 h-6 icon-open block" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
          <svg class="w-6 h-6 icon-close hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu Overlay -->
  <div 
    id="mobile-menu-overlay" 
    class="md:hidden fixed inset-0 bg-gradient-to-br from-bg-base-current via-bg-alt-current to-bg-tertiary-current dark:from-bg-base-dark dark:via-bg-alt-dark dark:to-bg-tertiary-dark z-40 transform translate-x-full transition-transform duration-300 ease-in-out motion-safe:transition-transform flex flex-col p-6 sm:p-8 will-change-transform"
    role="dialog"
    aria-modal="true"
    aria-labelledby="mobile-menu-title"
    aria-hidden="true"
  >
    <div class="flex justify-between items-center mb-8">
        <a href="/" class="flex flex-col group/logo" aria-label="Homepage">
          <span id="mobile-menu-title" class="text-2xl sm:text-3xl font-bold font-display text-text-base-current dark:text-text-dark-current">{siteTitle}</span>
          <span class="text-sm sm:text-base text-text-muted-current dark:text-text-muted-dark-current">{siteSubtitle}</span>
        </a>
        <button 
          id="mobile-menu-close-button" 
          aria-label="Close menu" 
          class="text-text-base-current dark:text-text-dark-current focus:outline-none p-2 rounded-md hover:bg-bg-alt-current dark:hover:bg-bg-alt-dark-current focus-visible:ring-2 focus-visible:ring-primary-500 transition-colors"
        >
          <svg class="w-7 h-7 sm:w-8 sm:h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
    </div>
    <nav class="flex flex-col space-y-2 mt-4 flex-grow" aria-label="Mobile navigation">
      {navItems.map((item, index) => {
        const isActive = currentPage === item.href || (item.href !== "/" && currentPage.startsWith(item.href) && item.href.length > 1);
        return (
          <a 
            href={item.href} 
            class:list={[
              "block text-2xl sm:text-3xl font-medium py-3 sm:py-4 px-3 rounded-lg transition-all duration-300 ease-out transform opacity-0 translate-y-3 hover:bg-primary-500/10 dark:hover:bg-primary-400/10 hover:text-primary-500 dark:hover:text-primary-400 focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-500/50 focus-visible:bg-primary-500/5 dark:focus-visible:bg-primary-400/5",
              isActive ? "text-primary-500 dark:text-primary-400 font-semibold bg-primary-500/5 dark:bg-primary-400/5" : "text-text-base-current dark:text-text-dark-current"
            ]}
            style={`transition-delay: ${index * 75 + 100}ms; transition-property: opacity, transform, background-color, color;`}
            aria-current={isActive ? "page" : undefined}
            id={`mobile-nav-${index}`}
          >
            {item.text}
          </a>
        );
      })}
    </nav>
    <div class="mt-auto pt-8 space-y-6 opacity-0 transform translate-y-3" style={`transition-delay: ${navItems.length * 75 + 200}ms; transition-property: opacity, transform;`}>
      <div class="flex justify-center">
        <ThemeToggle client:load />
      </div>
      <Button href="/contact#contact-form" variant="primary" size="lg" extraClass="w-full">
        Hire Me
      </Button>
      <div class="flex justify-center space-x-6 mt-6">
        <a href="https://github.com/IftekharRafi" target="_blank" rel="noopener noreferrer" aria-label="GitHub Profile" class="text-text-muted-current hover:text-primary-500 dark:hover:text-primary-400 transition-colors duration-300">
          <svg class="w-7 h-7 sm:w-8 sm:h-8" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path fill-rule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.165 6.839 9.489.5.092.682-.217.682-.483 0-.237-.009-.868-.013-1.703-2.782.602-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.465-1.11-1.465-.908-.62.069-.608.069-.608 1.003.074 1.532 1.028 1.532 1.028.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.682-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.022A9.564 9.564 0 0112 6.82c.85.004 1.705.114 2.504.336 1.909-1.291 2.747-1.022 2.747-1.022.546 1.377.202 2.394.1 2.647.64.698 1.028 1.591 1.028 2.682 0 3.842-2.338 4.687-4.566 4.935.359.307.678.915.678 1.846 0 1.338-.012 2.419-.012 2.746 0 .268.18.58.688.482A10.001 10.001 0 0022 12c0-5.523-4.477-10-10-10z" clip-rule="evenodd" /></svg>
        </a>
        <a href="https://linkedin.com/in/iftekhar-rafi" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn Profile" class="text-text-muted-current hover:text-primary-500 dark:hover:text-primary-400 transition-colors duration-300">
          <svg class="w-7 h-7 sm:w-8 sm:h-8" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/></svg>
        </a>
      </div>
    </div>
  </div>
</header>

<style>
  .is-sticky {
    /* Styles for when header is sticky (already applied by default in this setup) */
  }
  .header-hidden {
    transform: translateY(-100%);
  }

  /* Full-screen mobile menu overlay */
  #mobile-menu-overlay {
    /* Ensures it covers the full screen */
    height: 100vh; /* Fallback for older browsers */
    height: 100dvh; /* Dynamic viewport height */
    overflow-y: auto; /* Allow scrolling if content exceeds viewport */
  }

  #mobile-menu-overlay.is-open {
    transform: translateX(0);
  }

  /* Animation for mobile menu items */
  #mobile-menu-overlay.is-open nav a,
  #mobile-menu-overlay.is-open .mt-auto {
    opacity: 1;
    transform: translateY(0);
  }

  /* Prevent background scroll when menu is open */
  body.mobile-menu-open {
    overflow: hidden;
  }
</style>

<script>
  const header = document.getElementById('main-header');
  const scrollProgressBar = document.getElementById('scroll-progress-bar') as HTMLElement | null;
  let lastScrollTop = 0;

  function handleScroll() {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
    const scrollPercentage = scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;

    if (scrollProgressBar) {
      scrollProgressBar.style.width = `${scrollPercentage}%`;
    }

    // Only hide header on scroll if mobile menu is not open
    if (header && !document.body.classList.contains('mobile-menu-open')) {
      if (scrollTop > lastScrollTop && scrollTop > header.offsetHeight) {
        // Scroll down & past header
        header.classList.add('header-hidden');
      } else {
        // Scroll up or near top
        header.classList.remove('header-hidden');
      }
    }
    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling
  }

  window.addEventListener('scroll', handleScroll, { passive: true });

  const mobileMenuButton = document.getElementById('mobile-menu-button') as HTMLButtonElement | null;
  const mobileMenuCloseButton = document.getElementById('mobile-menu-close-button') as HTMLButtonElement | null;
  const mobileMenuOverlay = document.getElementById('mobile-menu-overlay') as HTMLElement | null;
  
  // Query all focusable elements within the mobile menu
  function getFocusableElementsInMenu(): HTMLElement[] {
    if (!mobileMenuOverlay) return [];
    const focusableSelector = 'a[href], button:not([disabled]), input:not([disabled]), textarea:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex="-1"])';
    return Array.from(mobileMenuOverlay.querySelectorAll<HTMLElement>(focusableSelector)).filter(el => el.offsetParent !== null);
  }

  let previouslyFocusedElement: HTMLElement | null = null;

  function openMobileMenu() {
    if (!mobileMenuOverlay || !mobileMenuButton || !mobileMenuCloseButton) return;
    previouslyFocusedElement = document.activeElement as HTMLElement | null;
    
    document.body.classList.add('mobile-menu-open');
    mobileMenuOverlay.classList.add('is-open');
    mobileMenuOverlay.setAttribute('aria-hidden', 'false');
    
    mobileMenuButton.setAttribute('aria-expanded', 'true');
    const openIcon = mobileMenuButton.querySelector('.icon-open');
    const closeIcon = mobileMenuButton.querySelector('.icon-close');
    if (openIcon) openIcon.classList.add('hidden');
    if (closeIcon) closeIcon.classList.remove('hidden');
    
    // Wait for transition to start before focusing
    setTimeout(() => {
      mobileMenuCloseButton.focus();
    }, 50); // Small delay to ensure focus works after display changes

    document.addEventListener('keydown', trapFocus);
  }

  function closeMobileMenu() {
    if (!mobileMenuOverlay || !mobileMenuButton) return;

    document.body.classList.remove('mobile-menu-open');
    mobileMenuOverlay.classList.remove('is-open');
    mobileMenuOverlay.setAttribute('aria-hidden', 'true');

    mobileMenuButton.setAttribute('aria-expanded', 'false');
    const openIcon = mobileMenuButton.querySelector('.icon-open');
    const closeIcon = mobileMenuButton.querySelector('.icon-close');
    if (openIcon) openIcon.classList.remove('hidden');
    if (closeIcon) closeIcon.classList.add('hidden');
    
    if (previouslyFocusedElement) {
      previouslyFocusedElement.focus();
    }
    document.removeEventListener('keydown', trapFocus);
  }

  function trapFocus(event: KeyboardEvent) {
    if (event.key !== 'Tab') return;

    const focusableElements = getFocusableElementsInMenu();
    if (focusableElements.length === 0) return;

    const firstFocusableElement = focusableElements[0];
    const lastFocusableElement = focusableElements[focusableElements.length - 1];

    if (event.shiftKey) { // Shift + Tab
      if (document.activeElement === firstFocusableElement) {
        lastFocusableElement.focus();
        event.preventDefault();
      }
    } else { // Tab
      if (document.activeElement === lastFocusableElement) {
        firstFocusableElement.focus();
        event.preventDefault();
      }
    }
  }

  if (mobileMenuButton) {
    mobileMenuButton.addEventListener('click', openMobileMenu);
  }
  if (mobileMenuCloseButton) {
    mobileMenuCloseButton.addEventListener('click', closeMobileMenu);
  }

  // Close menu on escape key
  window.addEventListener('keydown', (event: KeyboardEvent) => {
    if (event.key === 'Escape' && mobileMenuOverlay && mobileMenuOverlay.classList.contains('is-open')) {
      closeMobileMenu();
    }
  });

  // Close menu when a nav link is clicked
  if (mobileMenuOverlay) {
    const mobileNavLinks = mobileMenuOverlay.querySelectorAll<HTMLAnchorElement>('nav a[href]');
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', (event) => {
        if (mobileMenuOverlay.classList.contains('is-open')) {
          const url = new URL(link.href, window.location.origin);
          // If it's a same-page anchor link, let Astro handle scrolling or default behavior
          if (url.pathname === window.location.pathname && url.hash) {
            // For same-page anchors, close menu and let browser handle scroll or View Transitions
            closeMobileMenu();
            // Optionally, if View Transitions are not smooth enough with anchor:
            // event.preventDefault();
            // const targetElement = document.querySelector(url.hash);
            // if (targetElement) (targetElement as HTMLElement).scrollIntoView({ behavior: 'smooth' });
          } else {
            // For other links (different page or external), just close the menu.
            // Astro's View Transitions will handle the page change.
            closeMobileMenu();
          }
        }
      });
    });
    // Also close for the "Hire me" button if it's a link
    const hireMeButton = mobileMenuOverlay.querySelector<HTMLAnchorElement>('a[href="/contact#contact-form"]');
    if (hireMeButton) {
        hireMeButton.addEventListener('click', () => {
            if (mobileMenuOverlay.classList.contains('is-open')) {
                closeMobileMenu();
            }
        });
    }
  }
  
  // Set initial ARIA attributes
  if (mobileMenuOverlay) {
    mobileMenuOverlay.setAttribute('aria-hidden', 'true');
  }
  if (mobileMenuButton) {
    mobileMenuButton.setAttribute('aria-expanded', 'false');
  }

</script>
