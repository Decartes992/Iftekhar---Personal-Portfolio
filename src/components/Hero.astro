---
export interface Props {
  headline: string;
  subheadline: string;
  ctaText?: string;
  ctaLink?: string;
  imageUrl?: string;
  imageAlt?: string;
  socialProofLogos?: { src: string; alt: string }[];
}

const {
  headline = "Default Headline",
  subheadline = "Default subheadline text.",
  ctaText = "Get In Touch",
  ctaLink = "#contact",
  imageUrl = "/images/iftekhar_photo.jpg",
  imageAlt = "Hero visual element",
  socialProofLogos // Destructure socialProofLogos
} = Astro.props;

import Button from './Button.astro'; 

---
<!-- Hero Section -->
<section class="hero relative overflow-hidden py-16 md:py-24">
  <!-- Decorative floating elements -->
  <div class="absolute top-20 left-10 w-24 h-24 rounded-full bg-primary/10 dark:bg-primary/20 floating-element" style="animation-delay: 0s;"></div>
  <div class="absolute top-40 right-10 w-16 h-16 rounded-full bg-secondary/10 dark:bg-secondary/20 floating-element" style="animation-delay: 1s;"></div>
  <div class="absolute bottom-10 left-1/4 w-20 h-20 rounded-full bg-accent/10 dark:bg-accent/20 floating-element" style="animation-delay: 2s;"></div>
  
  <!-- Hero content container -->
  <div class="container relative z-10">
    <div class="max-w-3xl mx-auto text-center">
      <!-- Animated gradient text for name -->
      <h1 class="font-bold mb-4 sm:mb-6 gradient-text animate-fade-in">
        Iftekhar Rafi
      </h1>
      
      <!-- Typewriter effect for role -->
      <div class="text-xl sm:text-2xl md:text-3xl font-light mb-6 overflow-hidden whitespace-nowrap">
        <span class="typewriter-text">Computer Engineer</span>
      </div>
      
      <!-- Description with highlight -->
      <p class="text-lg md:text-xl mb-8 animate-fade-in" style="animation-delay: 0.3s;">
        Creating <span class="font-semibold text-primary dark:text-primary">intuitive</span> and 
        <span class="font-semibold text-secondary dark:text-secondary">impactful</span> digital experiences
      </p>
      
      <!-- Call to action buttons -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center mt-8 animate-fade-in" style="animation-delay: 0.6s;">
        <a href="#projects" class="btn btn-primary">
          View My Work
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 transition-transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </a>
        <a href="#contact" class="btn btn-outline">
          Get In Touch
        </a>
      </div>
    </div>
  </div>
  
  <!-- Background tech pattern (SVG shape) -->
  <div class="absolute inset-0 z-0 opacity-[0.03] dark:opacity-[0.05]">
    <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
      <defs>
        <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
          <path d="M 0 10 L 40 10 M 10 0 L 10 40 M 0 20 L 40 20 M 20 0 L 20 40 M 0 30 L 40 30 M 30 0 L 30 40" 
                fill="none" stroke="currentColor" stroke-width="0.5"/>
        </pattern>
      </defs>
      <rect width="100%" height="100%" fill="url(#grid)" />
    </svg>
  </div>
</section>

<style>
.hero {
  position: relative;
  overflow: hidden;
}
.hero::before,
.hero::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  pointer-events: none;
  transition: opacity 0.3s ease-in-out;
}
.hero::before {
  /* Light theme gradient */
  background-image: linear-gradient(to bottom right, var(--clr-bg-base), var(--clr-bg-alt));
  opacity: 1;
}
.hero::after {
  /* Dark theme gradient */
  background-image: linear-gradient(to bottom right, var(--clr-bg-dark), var(--clr-bg-alt-dark));
  opacity: 0;
}
html[data-theme="dark"] .hero::before {
  opacity: 0;
}
html[data-theme="dark"] .hero::after {
  opacity: 1;
}
</style>

<script>
  // Add scroll-triggered animations
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-fade-in');
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1
    });

    // Observe elements with the scroll-animate class
    document.querySelectorAll('.scroll-animate').forEach(el => {
      observer.observe(el);
    });
  });
</script>